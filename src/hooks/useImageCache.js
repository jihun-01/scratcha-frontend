import { useState, useEffect, useCallback } from 'react';

// Ïù¥ÎØ∏ÏßÄ Ï∫êÏãú Ï†ÄÏû•ÏÜå (Î©îÎ™®Î¶¨ + localStorage)
const imageCache = new Map();
const CACHE_KEY_PREFIX = 'scratcha_image_cache_';
const CACHE_EXPIRY_TIME = 24 * 60 * 60 * 1000; // 24ÏãúÍ∞Ñ

// localStorageÏóêÏÑú Ï∫êÏãúÎêú Ïù¥ÎØ∏ÏßÄ Î≥µÏõê (ÎèôÍ∏∞Ïãù)
const loadCachedImagesFromStorage = () => {
    try {
        const now = Date.now();
        const keysToCheck = [];

        // Î®ºÏ†Ä Î™®Îì† Ï∫êÏãú ÌÇ§Î•º ÏàòÏßë
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key && key.startsWith(CACHE_KEY_PREFIX)) {
                keysToCheck.push(key);
            }
        }

        // Ï∫êÏãú ÌÇ§Îì§ÏùÑ Ï≤òÎ¶¨
        keysToCheck.forEach(key => {
            try {
                const cachedData = JSON.parse(localStorage.getItem(key));
                if (cachedData && cachedData.expiry > now) {
                    const originalUrl = key.replace(CACHE_KEY_PREFIX, '');
                    imageCache.set(originalUrl, cachedData.dataUrl);
                } else {
                    // ÎßåÎ£åÎêú Ï∫êÏãú ÏÇ≠Ï†ú (ÎπÑÎèôÍ∏∞Î°ú Ï≤òÎ¶¨ÌïòÏó¨ ÏÑ±Îä• Ìñ•ÏÉÅ)
                    setTimeout(() => localStorage.removeItem(key), 0);
                }
            } catch (parseError) {
                console.warn('Ï∫êÏãú ÌååÏã± Ïã§Ìå®:', parseError);
                setTimeout(() => localStorage.removeItem(key), 0);
            }
        });

        console.log(`Ïù¥ÎØ∏ÏßÄ Ï∫êÏãú Î°úÎìú ÏôÑÎ£å: ${imageCache.size}Í∞ú Ïù¥ÎØ∏ÏßÄ`);
    } catch (error) {
        console.warn('Ïù¥ÎØ∏ÏßÄ Ï∫êÏãú Î°úÎìú Ïã§Ìå®:', error);
    }
};

// Ïù¥ÎØ∏ÏßÄÎ•º Base64Î°ú Î≥ÄÌôòÌïòÏó¨ Ï∫êÏãúÏóê Ï†ÄÏû•
const cacheImageToStorage = async (url, dataUrl) => {
    try {
        const cacheKey = CACHE_KEY_PREFIX + url;
        const cacheData = {
            dataUrl,
            expiry: Date.now() + CACHE_EXPIRY_TIME,
            cached: Date.now()
        };

        // localStorage Ïö©Îüâ Ï≤¥ÌÅ¨ (5MB Ï†úÌïú)
        const dataSize = JSON.stringify(cacheData).length;
        if (dataSize > 5 * 1024 * 1024) {
            console.warn('Ïù¥ÎØ∏ÏßÄÍ∞Ä ÎÑàÎ¨¥ Ïª§ÏÑú Ï∫êÏãúÌïòÏßÄ ÏïäÏäµÎãàÎã§:', url);
            return;
        }

        localStorage.setItem(cacheKey, JSON.stringify(cacheData));
        imageCache.set(url, dataUrl);
    } catch (error) {
        console.warn('Ïù¥ÎØ∏ÏßÄ Ï∫êÏãú Ï†ÄÏû• Ïã§Ìå®:', error);
        // localStorageÍ∞Ä Í∞ÄÎìù Ï∞¨ Í≤ΩÏö∞ Ïò§ÎûòÎêú Ï∫êÏãú ÏÇ≠Ï†ú
        if (error.name === 'QuotaExceededError') {
            clearOldCache();
            // Ïû¨ÏãúÎèÑ
            try {
                localStorage.setItem(CACHE_KEY_PREFIX + url, JSON.stringify({
                    dataUrl,
                    expiry: Date.now() + CACHE_EXPIRY_TIME,
                    cached: Date.now()
                }));
            } catch (retryError) {
                console.warn('Ï∫êÏãú Ïû¨ÏãúÎèÑ Ïã§Ìå®:', retryError);
            }
        }
    }
};

// Ïò§ÎûòÎêú Ï∫êÏãú ÏÇ≠Ï†ú
const clearOldCache = () => {
    try {
        const keysToRemove = [];
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key && key.startsWith(CACHE_KEY_PREFIX)) {
                keysToRemove.push(key);
            }
        }

        // Í∞ÄÏû• Ïò§ÎûòÎêú Ï∫êÏãúÎ∂ÄÌÑ∞ ÏÇ≠Ï†ú
        keysToRemove.sort((a, b) => {
            const aData = JSON.parse(localStorage.getItem(a) || '{}');
            const bData = JSON.parse(localStorage.getItem(b) || '{}');
            return (aData.cached || 0) - (bData.cached || 0);
        });

        // Ï†àÎ∞ò Ï†ïÎèÑ ÏÇ≠Ï†ú
        const removeCount = Math.ceil(keysToRemove.length / 2);
        for (let i = 0; i < removeCount; i++) {
            localStorage.removeItem(keysToRemove[i]);
            const url = keysToRemove[i].replace(CACHE_KEY_PREFIX, '');
            imageCache.delete(url);
        }
    } catch (error) {
        console.warn('Ï∫êÏãú Ï†ïÎ¶¨ Ïã§Ìå®:', error);
    }
};

// Ïù¥ÎØ∏ÏßÄÎ•º Base64Î°ú Î≥ÄÌôò
const convertImageToBase64 = (url) => {
    return new Promise((resolve, reject) => {
        const img = new Image();
        img.crossOrigin = 'anonymous';

        img.onload = () => {
            try {
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                canvas.width = img.width;
                canvas.height = img.height;
                ctx.drawImage(img, 0, 0);
                const dataUrl = canvas.toDataURL('image/png');
                resolve(dataUrl);
            } catch (error) {
                reject(error);
            }
        };

        img.onerror = () => reject(new Error('Ïù¥ÎØ∏ÏßÄ Î°úÎìú Ïã§Ìå®'));
        img.src = url;
    });
};

// Ï¥àÍ∏∞ Ï∫êÏãú Î°úÎìú
loadCachedImagesFromStorage();

export const useImageCache = (src, fallbackSrc = null) => {
    // Ï¥àÍ∏∞ ÏÉÅÌÉúÏóêÏÑú Ï∫êÏãú ÌôïÏù∏
    const [imageSrc, setImageSrc] = useState(() => {
        if (!src) return src;
        // Î©îÎ™®Î¶¨ Ï∫êÏãúÏóêÏÑú Ï¶âÏãú ÌôïÏù∏
        return imageCache.has(src) ? imageCache.get(src) : src;
    });

    const [isLoading, setIsLoading] = useState(() => {
        if (!src) return false;
        // Ï∫êÏãúÎêú Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏûàÍ±∞ÎÇò Î°úÏª¨ Ïù¥ÎØ∏ÏßÄÎ©¥ Î°úÎî© ÏÉÅÌÉúÎ•º falseÎ°ú ÏãúÏûë
        if (imageCache.has(src)) return false;
        if (!src.startsWith('http://') && !src.startsWith('https://')) return false;
        return true;
    });

    const [hasError, setHasError] = useState(false);
    const [isCached, setIsCached] = useState(() => {
        if (!src) return false;
        return imageCache.has(src);
    });

    const loadImage = useCallback(async (url) => {
        if (!url) {
            setIsLoading(false);
            setHasError(true);
            return;
        }

        // Î©îÎ™®Î¶¨ Ï∫êÏãúÏóêÏÑú Î®ºÏ†Ä ÌôïÏù∏ (Î°úÎî© ÏÉÅÌÉú Î≥ÄÍ≤Ω ÏóÜÏù¥)
        if (imageCache.has(url)) {
            console.log('üü¢ Ï∫êÏãúÎêú Ïù¥ÎØ∏ÏßÄ ÏÇ¨Ïö©:', url);
            setImageSrc(imageCache.get(url));
            setIsCached(true);
            setIsLoading(false);
            setHasError(false);
            return;
        }

        console.log('üîÑ Ïù¥ÎØ∏ÏßÄ Î°úÎî© ÏãúÏûë:', url);

        // Ï∫êÏãúÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞ÏóêÎßå Î°úÎî© ÏÉÅÌÉú ÏÑ§Ï†ï
        setIsLoading(true);
        setHasError(false);

        try {

            // Ïô∏Î∂Ä URLÏù∏ Í≤ΩÏö∞ÏóêÎßå Ï∫êÏã± ÏãúÎèÑ
            if (url.startsWith('http://') || url.startsWith('https://')) {
                try {
                    const dataUrl = await convertImageToBase64(url);
                    await cacheImageToStorage(url, dataUrl);
                    setImageSrc(dataUrl);
                    setIsCached(true);
                    console.log('‚úÖ Ïô∏Î∂Ä Ïù¥ÎØ∏ÏßÄ Ï∫êÏã± ÏôÑÎ£å:', url);
                } catch (cacheError) {
                    console.warn('Ïù¥ÎØ∏ÏßÄ Ï∫êÏã± Ïã§Ìå®, ÏõêÎ≥∏ URL ÏÇ¨Ïö©:', cacheError);
                    setImageSrc(url);
                    setIsCached(false);
                }
            } else {
                // Î°úÏª¨ Ïù¥ÎØ∏ÏßÄÎäî Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©ÌïòÍ≥† Ï¶âÏãú Î°úÎî© ÏôÑÎ£å Ï≤òÎ¶¨
                console.log('üìÅ Î°úÏª¨ Ïù¥ÎØ∏ÏßÄ ÏÇ¨Ïö©:', url);
                setImageSrc(url);
                setIsCached(false);
            }

            setIsLoading(false);
        } catch (error) {
            console.error('Ïù¥ÎØ∏ÏßÄ Î°úÎìú Ïã§Ìå®:', error);
            setHasError(true);
            setIsLoading(false);

            // fallback Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏûàÏúºÎ©¥ ÏãúÎèÑ
            if (fallbackSrc && fallbackSrc !== url) {
                loadImage(fallbackSrc);
            }
        }
    }, [fallbackSrc]);

    useEffect(() => {
        // Ïù¥ÎØ∏ Ï∫êÏãúÎêú Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏûàÏúºÎ©¥ loadImageÎ•º Ìò∏Ï∂úÌïòÏßÄ ÏïäÏùå
        if (!imageCache.has(src)) {
            loadImage(src);
        }
    }, [src, loadImage]);

    const retry = useCallback(() => {
        loadImage(src);
    }, [src, loadImage]);

    const clearCache = useCallback(() => {
        try {
            const cacheKey = CACHE_KEY_PREFIX + src;
            localStorage.removeItem(cacheKey);
            imageCache.delete(src);
            console.log('Ï∫êÏãú ÏÇ≠Ï†úÎê®:', src);
        } catch (error) {
            console.warn('Ï∫êÏãú ÏÇ≠Ï†ú Ïã§Ìå®:', error);
        }
    }, [src]);

    return {
        imageSrc,
        isLoading,
        hasError,
        isCached,
        retry,
        clearCache
    };
};

// Ï†ÑÏ≤¥ Ïù¥ÎØ∏ÏßÄ Ï∫êÏãú Í¥ÄÎ¶¨ Ïú†Ìã∏Î¶¨Ìã∞
export const imageCacheUtils = {
    // Ï†ÑÏ≤¥ Ï∫êÏãú ÏÇ≠Ï†ú
    clearAllCache: () => {
        try {
            const keysToRemove = [];
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                if (key && key.startsWith(CACHE_KEY_PREFIX)) {
                    keysToRemove.push(key);
                }
            }
            keysToRemove.forEach(key => localStorage.removeItem(key));
            imageCache.clear();
            console.log('Î™®Îì† Ïù¥ÎØ∏ÏßÄ Ï∫êÏãúÍ∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
        } catch (error) {
            console.warn('Ï∫êÏãú ÏÇ≠Ï†ú Ïã§Ìå®:', error);
        }
    },

    // Ï∫êÏãú ÏÉÅÌÉú Ï†ïÎ≥¥
    getCacheInfo: () => {
        const cacheSize = imageCache.size;
        const storageKeys = [];
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key && key.startsWith(CACHE_KEY_PREFIX)) {
                storageKeys.push(key);
            }
        }
        return {
            memoryCache: cacheSize,
            localStorage: storageKeys.length,
            keys: storageKeys
        };
    }
};