name: CI/CD Frontend

on:
  push:
    branches: 
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  # develop 브랜치용 VM 배포 잡
  deploy-to-vm:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    env:
      SERVICE_NAME: front
      REGISTRY: ${{ secrets.KCR_REGISTRY_URL }}
      IMAGE_NAME: ${{ secrets.KCR_FRONTEND_DEV_IMAGE_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to Kakao Cloud Registry
        run: |
          echo "${{ secrets.KCR_PASSWORD }}" | docker login ${{ secrets.KCR_REGISTRY_URL }} -u "${{ secrets.KCR_USER }}" --password-stdin

      - name: Build & Push Docker Image
        run: |
          IMAGE_TAG="$(date +%Y%m%d%H%M%S)-${{ github.sha }}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> "$GITHUB_ENV"
          
          # 시크릿 값 검증
          if [ -z "$REGISTRY" ]; then
            echo "❌ REGISTRY is empty"
            exit 1
          fi
          if [ -z "$IMAGE_NAME" ]; then
            echo "❌ IMAGE_NAME is empty"
            exit 1
          fi
          
          # 레지스트리 이름 형식 검증 (카카오 클라우드 레지스트리 포함)
          if ! echo "$REGISTRY" | grep -E '^[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?)*(\:[0-9]+)?$' > /dev/null; then
            echo "⚠️  REGISTRY format might be incorrect: $REGISTRY"
            echo "Expected format: hostname or hostname:port (e.g., xxx.kakaocloud.com or registry.example.com:5000)"
          else
            echo "✅ REGISTRY format validation passed"
          fi
          
          # 이미지 이름 형식 검증
          if ! echo "$IMAGE_NAME" | grep -E '^[a-z0-9]+([a-z0-9._-]*[a-z0-9])*(/[a-z0-9]+([a-z0-9._-]*[a-z0-9])*)*$' > /dev/null; then
            echo "❌ IMAGE_NAME contains invalid characters: $IMAGE_NAME"
            echo "Image names must be lowercase and contain only alphanumeric characters, periods, underscores, and hyphens"
            exit 1
          fi
          
          echo "✅ Registry and image name validation passed"
          echo "FULL_IMAGE_NAME: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG"
          
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG .
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Frontend VM via Bastion
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          set -x
          mkdir -p ~/.ssh
          ssh-keyscan -v -H "$SSH_HOST" >> ~/.ssh/known_hosts 2>&1

          # 로컬 셸의 $IMAGE_TAG (GITHUB_ENV로 주입됨)를 사용
          ssh -v -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USERNAME@$SSH_HOST" \
            "echo '${{ secrets.KCR_PASSWORD }}' | docker login '${{ secrets.KCR_REGISTRY_URL }}' -u '${{ secrets.KCR_USER }}' --password-stdin && \
             docker stop scratcha_frontend || true && \
             docker rm scratcha_frontend || true && \
             docker pull '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}' && \
             docker run -d --name scratcha_frontend -p 80:80 '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}'" 2>&1

  # main 브랜치용 ArgoCD 배포 잡 (기존과 동일)
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    env:
      SERVICE_NAME: front
      # 시크릿 → 셸 env 매핑 (디버깅/사용 편의를 위해)
      KCR_REGISTRY_URL: ${{ secrets.KCR_REGISTRY_URL }}
      KCR_IMAGE_NAME: ${{ secrets.KCR_IMAGE_NAME }}
      # (선택) 환경 시크릿을 쓰는 경우 활성화
      # environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to Kakao Cloud Registry
        run: |
          echo "${{ secrets.KCR_PASSWORD }}" | docker login ${{ secrets.KCR_REGISTRY_URL }} -u "${{ secrets.KCR_USER }}" --password-stdin

      - name: Build & Push Docker Image
        run: |
          IMAGE_TAG="$(date +%Y%m%d%H%M%S)-${{ github.sha }}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> "$GITHUB_ENV"

          # 비어있는지 체크 (시크릿은 마스킹되므로 값 그 자체를 echo 하지 않는 게 안전)
          if [ -z "${KCR_REGISTRY_URL}" ]; then
            echo "❌ KCR_REGISTRY_URL is empty"
            exit 1
          fi
          if [ -z "${KCR_IMAGE_NAME}" ]; then
            echo "❌ KCR_IMAGE_NAME is empty"
            exit 1
          fi
          
          # 레지스트리 이름 형식 검증 (카카오 클라우드 레지스트리 포함)
          if ! echo "${KCR_REGISTRY_URL}" | grep -E '^[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?)*(\:[0-9]+)?$' > /dev/null; then
            echo "⚠️  KCR_REGISTRY_URL format might be incorrect: ${KCR_REGISTRY_URL}"
            echo "Expected format: hostname or hostname:port (e.g., xxx.kakaocloud.com or registry.example.com:5000)"
          else
            echo "✅ KCR_REGISTRY_URL format validation passed"
          fi
          
          # 이미지 이름 형식 검증 (소문자, 숫자, 하이픈, 슬래시만 허용)
          if ! echo "${KCR_IMAGE_NAME}" | grep -E '^[a-z0-9]+([a-z0-9._-]*[a-z0-9])*(/[a-z0-9]+([a-z0-9._-]*[a-z0-9])*)*$' > /dev/null; then
            echo "❌ KCR_IMAGE_NAME contains invalid characters: ${KCR_IMAGE_NAME}"
            echo "Image names must be lowercase and contain only alphanumeric characters, periods, underscores, and hyphens"
            exit 1
          fi

          echo "✅ Secrets mapped to env detected"
          echo "Registry and image name validation passed"
          echo "FULL_IMAGE_NAME: ${{ env.KCR_REGISTRY_URL }}/${{ env.KCR_IMAGE_NAME }}:$IMAGE_TAG"

          docker build -t ${{ env.KCR_REGISTRY_URL }}/${{ env.KCR_IMAGE_NAME }}:$IMAGE_TAG .
          docker push ${{ env.KCR_REGISTRY_URL }}/${{ env.KCR_IMAGE_NAME }}:$IMAGE_TAG
          docker tag ${{ env.KCR_REGISTRY_URL }}/${{ env.KCR_IMAGE_NAME }}:$IMAGE_TAG ${{ env.KCR_REGISTRY_URL }}/${{ env.KCR_IMAGE_NAME }}:latest
          docker push ${{ env.KCR_REGISTRY_URL }}/${{ env.KCR_IMAGE_NAME }}:latest

      - name: Checkout test Repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.REPO_NAME }}
          token: ${{ secrets.REPO_TOKEN }}
          path: ${{ secrets.REPO_PATH }}

      - name: Update values.yaml
        run: |
          sed -i "s|tag:.*|tag: \"${IMAGE_TAG}\"|" "${{ secrets.REPO_PATH }}/${{ secrets.HELM_CHART_PATH }}/values.yaml"

      - name: Commit & Push changes
        run: |
          cd "${{ secrets.REPO_PATH }}"
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add "${{ secrets.HELM_CHART_PATH }}/values.yaml"
          git commit -m "Update frontend image tag to ${IMAGE_TAG}" || echo "No changes to commit"
          git push origin main
